import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("Impl Interpreter\n");
	    System.err.println("=================\n\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	implLexer lex = new implLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	implParser parser = new implParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	String result=interpreter.visit(parseTree);
	System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<String> implements implVisitor<String> {
    // todo - Java will complain that "Interpreter" does not in fact
    // implement "implVisitor" at the moment.

    public String visitStart(implParser.StartContext ctx){
	System.out.println("Evaluating Start");
	return visit(ctx.m);
    }

	@Override
	public String visitMethods(implParser.MethodsContext ctx) {
		return visit(ctx.hw);
	}


	public String visitHardware(implParser.HardwareContext ctx){
	String hardware_name = ctx.v.getText();

	System.out.println("Hardware:" + hardware_name);

	return hardware_name;
    }

	@Override
	public String visitInput(implParser.InputContext ctx) {
		return null;
	}

	@Override
	public String visitOutput(implParser.OutputContext ctx) {
		return null;
	}

	@Override
	public String visitLatches(implParser.LatchesContext ctx) {
		return null;
	}

	@Override
	public String visitSimulate(implParser.SimulateContext ctx) {
		return null;
	}

	@Override
	public String visitUpdates(implParser.UpdatesContext ctx) {
		return null;
	}

	@Override
	public String visitList(implParser.ListContext ctx) {
		return null;
	}

	@Override
	public String visitLatch(implParser.LatchContext ctx) {
		return null;
	}

	@Override
	public String visitSimulation(implParser.SimulationContext ctx) {
		return null;
	}

	@Override
	public String visitUpdate(implParser.UpdateContext ctx) {
		return null;
	}

	@Override
	public String visitOR(implParser.ORContext ctx) {
		return null;
	}

	@Override
	public String visitVar(implParser.VarContext ctx) {
		return null;
	}

	@Override
	public String visitAND(implParser.ANDContext ctx) {
		return null;
	}

	@Override
	public String visitParen(implParser.ParenContext ctx) {
		return null;
	}

	;
}

