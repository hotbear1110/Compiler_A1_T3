import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;

import java.io.IOException;


public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("Impl Interpreter\n");
	    System.err.println("=================\n\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);

	// create a lexer/scanner
	implLexer lex = new implLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	implParser parser = new implParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	interpreter.visit(parseTree);

	html htmlFile = new html();
	htmlFile.create();
	}
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Void> implements implVisitor<Void> {

    public Void visitStart(implParser.StartContext ctx){

		for (ParseTree child : ctx.children) {
			visit(child);
		}
	return null;
    }

	@Override
	public Void visitMethods(implParser.MethodsContext ctx) {
		return visit(ctx.getChild(0));
	}


	public Void visitHardware(implParser.HardwareContext ctx) {
	String hardware_name = ctx.v.getText();

		html htmlFile = new html();
		htmlFile.write("<h1> " + hardware_name + " </h1>\n\n");

		return null;
    }

	@Override
	public Void visitInput(implParser.InputContext ctx) {
		html htmlFile = new html();
		htmlFile.write("<h2> Inputs </h2>\n");
		for (ParseTree child : ctx.children) {
			visit(child);
		}
		return null;
	}

	@Override
	public Void visitOutput(implParser.OutputContext ctx) {
		html htmlFile = new html();
		htmlFile.write("<h2> Outputs </h2>\n");
		for (ParseTree child : ctx.children) {
			visit(child);
		}
		return null;
	}

	@Override
	public Void visitLatches(implParser.LatchesContext ctx) {
		html htmlFile = new html();
		htmlFile.write("<h2> Latches </h2>\n");
		for (ParseTree child : ctx.children) {
			visit(child);
		}
		return null;
	}

	@Override
	public Void visitSimulate(implParser.SimulateContext ctx) {
		for (ParseTree child : ctx.children) {
			visit(child);
		}
		return null;
	}

	@Override
	public Void visitUpdates(implParser.UpdatesContext ctx) {
		html htmlFile = new html();
		htmlFile.write("<h2> Updates </h2>");
		for (ParseTree child : ctx.children) {
			visit(child);
		}
		return null;
	}

	@Override
	public Void visitList(implParser.ListContext ctx) {
		for (ParseTree child : ctx.children) {
			html htmlFile = new html();
			htmlFile.write("\\(\\mathrm{" + child.getText() + "}\\)" + "<br>");
		}
		return null;
	}

	@Override
	public Void visitLatch(implParser.LatchContext ctx) {
		html htmlFile = new html();
		htmlFile.write("\\(\\mathrm{" + ctx.v1.getText() + "}" + "&rarr;" + "\\mathrm{" + ctx.v2.getText() + "}\\)" + "<br>");
		return null;
	}

	@Override
	public Void visitSimulation(implParser.SimulationContext ctx) {
		html htmlFile = new html();
		htmlFile.write(
				"<h2> Simulation inputs </h2>\n" +
							"<b> " + "\\(\\mathrm{" + ctx.v.getText() + "}\\)" + " </b>\\(\\mathrm{: " + ctx.i.getText() + "}\\)\n\n"
		);
		return null;
	}

	@Override
	public Void visitUpdate(implParser.UpdateContext ctx) {
		html htmlFile = new html();
		htmlFile.write("\\(\\mathrm{" + ctx.v.getText() + "&larr;");
		visit(ctx.e);
		htmlFile.write("}\\)<br>");
		return null;
	}

	@Override
	public Void visitOR(implParser.ORContext ctx) {
		visit(ctx.e1);
		html htmlFile = new html();
		htmlFile.write("\\vee(");
		visit(ctx.e2);
		htmlFile.write(")");
		return null;
	}

	@Override
	public Void visitVar(implParser.VarContext ctx) {
		html htmlFile = new html();
		if (ctx.not != null) {
			htmlFile.write("\\neg(" + ctx.x.getText() + ")");
		} else {
			htmlFile.write(ctx.x.getText());
		}
		return null;
	}

	@Override
	public Void visitAND(implParser.ANDContext ctx) {
		visit(ctx.e1);
		html htmlFile = new html();
		htmlFile.write("\\wedge(");
		visit(ctx.e2);
		htmlFile.write(")");
		return null;
	}

	@Override
	public Void visitParen(implParser.ParenContext ctx) {
		html htmlFile = new html();
		htmlFile.write("(");
		visit(ctx.e);
		htmlFile.write(")");
		return null;
	}

	;
};